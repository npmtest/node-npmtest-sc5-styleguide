{"/home/travis/build/npmtest/node-npmtest-sc5-styleguide/test.js":"/* istanbul instrument in package npmtest_sc5_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/lib.npmtest_sc5_styleguide.js":"/* istanbul instrument in package npmtest_sc5_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sc5_styleguide = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sc5_styleguide = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sc5-styleguide && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sc5_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sc5_styleguide\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sc5_styleguide.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sc5_styleguide.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sc5_styleguide.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sc5_styleguide.__dirname + '/lib.npmtest_sc5_styleguide.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/styleguide.js":"/***\n*\n* styleguide.js\n*\n* Parses CSS/LESS/SASS files with KSS notation and generates a styleguide\n*\n* Heavily influenced by node-kss and gulp-kss projects\n*\n***/\n\n'use strict';\n\nvar path = require('path'),\n  pug = require('pug'),\n  through = require('through2'),\n  gulp = require('gulp'),\n  rename = require('gulp-rename'),\n  mustache = require('gulp-mustache'),\n  postcss = require('gulp-postcss'),\n  replace = require('gulp-replace'),\n  minimatch = require('minimatch'),\n  fs = require('fs-extra'),\n  File = require('vinyl'),\n  LocalCache = require('node-localcache'),\n  crypto = require('crypto'),\n  Q = require('q'),\n  _ = require('lodash'),\n  markdown = require('./modules/markdown'),\n  atRules = require('./modules/at-rules'),\n  variableParser = require('./modules/variable-parser'),\n  kssParser = require('./modules/kss-parser'),\n  angularFiles = require('./modules/angular-files'),\n  pseudoSelectors = require('./modules/pseudo-selectors'),\n  wrapperMarkup = require('./modules/wrapper-markup'),\n  sectionReferences = require('./modules/section-references'),\n  common = require('./modules/common'),\n  addSection = require('./modules/helpers/add-section'),\n  sgServer = require('./server'),\n  distPath = path.join(__dirname, 'dist'),\n  fileHashes = {},\n  pugCache,\n  sgOptions, // global object for options\n  serverInstance,\n  bemtoPath = require.resolve('bemto.pug');\n\nfunction socketIsOpen() {\n  return serverInstance && serverInstance[sgOptions.port].io;\n}\n\nfunction emitProgressStart() {\n  if (socketIsOpen()) {\n    serverInstance[sgOptions.port].io.emitProgressStart();\n  }\n}\n\nfunction emitProgressEnd() {\n  if (socketIsOpen()) {\n    serverInstance[sgOptions.port].io.emitProgressEnd();\n  }\n}\n\nfunction emitCompileError(error) {\n  if (socketIsOpen()) {\n    serverInstance[sgOptions.port].io.emitCompileError(error);\n  }\n}\n\nfunction emitCompileSuccess() {\n  if (socketIsOpen()) {\n    serverInstance[sgOptions.port].io.emitCompileSuccess();\n  }\n}\n\nfunction groupModuleFiles(allModules) {\n  // Group modules by module name\n  var namedModules = _.groupBy(allModules, function(module) {\n    return module.name;\n  });\n\n  // Commbile files from every module that has the same name\n  return _.map(namedModules, function(modules, moduleName) {\n    var files = _.uniq(_.reduce(modules, function(files, singleModule) {\n      return files.concat(singleModule.files);\n    }, []));\n    return {\n      name: moduleName,\n      files: files\n    };\n  });\n}\n\nfunction generatePugMarkup(json, options) {\n  pugCache = new LocalCache(path.resolve(options.rootPath, 'pugcache.json'));\n\n  var rootPath = path.resolve(__dirname, '../');\n  rootPath = path.relative(rootPath, bemtoPath);\n\n  // path to bemto\n  var bemtoinclude = 'include ./' + rootPath + '\\n',\n      pugOptions = {\n        filename: __dirname,\n        basedir: process.cwd(),\n        compileDebug: true,\n        pretty: true\n      };\n\n  _.each(json.sections, convertToPug);\n\n  var parentref;\n  function convertToPug(section) {\n    var cacheKey, pugstring, md5;\n\n    if (!section.markup) { return; }\n    if (/<[a-z][\\s\\S]*>/i.test(section.markup)) { return; }\n\n    section.markupPug = section.markup;\n\n    if (section.reference) {\n      parentref = section.reference;\n      cacheKey = section.reference;\n    } else {\n      cacheKey = parentref + ' - ' + section.name;\n    }\n\n    pugstring = bemtoinclude + section.markup;\n    md5 = crypto.createHash('md5').update(pugstring).digest('hex');\n\n    if (pugCache.getItem(cacheKey) && pugCache.getItem(cacheKey).key === md5) {\n      section.markup = pugCache.getItem(cacheKey).value;\n    } else {\n      section.markup = pug.render(pugstring, pugOptions);\n      pugCache.setItem(cacheKey, {\n        key : md5,\n        value : section.markup\n      });\n    }\n\n    if (section.modifiers) {\n      _.each(section.modifiers, convertToPug);\n    }\n  }\n}\n\nfunction generateSectionWrapperMarkup(json) {\n  json.section = wrapperMarkup.generateSectionWrapperMarkup(json.sections);\n}\n\nfunction replaceSectionReferences(json) {\n  json.sections = sectionReferences.replace(json.sections);\n}\n\nfunction copyUsedOptionsToJsonConfig(opt, json) {\n  var used = ['appRoot', 'extraHead', 'beforeBody', 'afterBody', 'commonClass', 'title', 'disableEncapsulation', 'disableHtml5Mode', 'readOnly', 'sideNav', 'afterSections', 'showMarkupSection', 'hideSubsectionsOnMainSection', 'additionalNgDependencies'];\n  json.config = {};\n  used.forEach(function(prop) {\n    json.config[prop] = _.cloneDeep(opt[prop]);\n  });\n  return json;\n}\n\nfunction copyUsedOptionsToInlineJsonConfig(opt, json) {\n  var used = ['title', 'disableEncapsulation', 'disableHtml5Mode', 'sideNav', 'afterSections', 'showMarkupSection', 'hideSubsectionsOnMainSection','additionalNgDependencies'];\n  json.config = {};\n  used.forEach(function(prop) {\n    json.config[prop] = _.cloneDeep(opt[prop]);\n  });\n  return json;\n}\n\nfunction addFileHashesAndReplaceAbsolutePaths(json) {\n  if (!json) {\n    return;\n  }\n\n  if (json.variables) {\n    json.variables.forEach(function(variable) {\n      variable.fileHash = fileHashes[variable.file];\n      variable.file = basenameOf(variable.file);\n    });\n  }\n\n  if (json.variables) {\n    json.sections.forEach(function(section) {\n      section.fileHash = fileHashes[section.file];\n      section.file = basenameOf(section.file);\n    });\n  }\n}\n\nfunction basenameOf(p) {\n  return path.basename(p);\n}\n\nfunction appendUsedVariablesToEachBlock(opt, styleguide) {\n  // Go trough every styleguide style block and find used variables\n  styleguide.sections.forEach(function(section) {\n    // It is possible that the CSS is not valid anymore after it is splitted to sections\n    // We need to catch possible parsing errors\n    try {\n      if (section.css) {\n        section.variables = variableParser.findVariables(section.css, section.syntax, opt);\n      }\n    } catch (e) {\n      console.error('Could not parse used variables from section', section.reference + ':');\n      console.error(e.toString());\n    }\n\n    variableParser.findModifierVariables(section.modifiers).forEach(function(varName) {\n      if (!section.variables || section.variables.indexOf(varName) === -1) {\n        section.variables = section.variables || [];\n        section.variables.push(varName);\n      }\n    });\n    return section;\n  });\n}\n\nfunction filterFiles(files, filter) {\n  var filtered = {};\n  Object.keys(files).forEach(function(filePath) {\n    if (minimatch(filePath, filter)) {\n      filtered[filePath] = files[filePath];\n    }\n  });\n  return filtered;\n}\n\nmodule.exports.generate = function(options) {\n  var opt = common.sanitizeOptions(options),\n    filesBuffer = {},\n    throughOpts = {\n      objectMode: true,\n      allowHalfOpen: false\n    },\n    styleguideProcessors = _.extend(\n        {\n          10: replaceSectionReferences,\n          20: generateSectionWrapperMarkup\n        },\n        opt.styleguideProcessors\n    );\n  sgOptions = opt; // Copy options into global\n\n  function bufferFileContents(file, enc, done) {\n    if (file.isNull()) {\n      return;\n    }\n    if (file.isStream()) {\n      return console.error('Styleguide does not support streams!');\n    }\n\n    // Exclude empty files\n    if (file.contents.toString('utf8') !== '') {\n      filesBuffer[file.path] = file.contents.toString('utf8');\n      var hash = crypto.createHash('md5').update(file.path).digest('hex');\n      fileHashes[file.path] = hash;\n      fileHashes[hash] = file.path;\n    }\n\n    // Make sure file goes through the next gulp plugin\n    // jshint -W040\n    this.push(file);\n    // jshint +W040\n    done();\n  }\n\n  emitProgressStart();\n\n  // A stream through which each file will pass\n  return through(throughOpts, bufferFileContents, function(callback) {\n      var _this = this,\n        // Styleguide object to be built\n        styleguide = {},\n        // Parse KSS sections\n        parseKSSPromise = kssParser.parseKssSections(filesBuffer, opt.kssOpt, opt.parsers),\n        // Filter variable files\n        // File paths are full absolute paths so we need to add wildcard prefix\n        // Also empty wildcard should return all files\n        variableFiles = opt.styleVariables ? filterFiles(filesBuffer, '**/' + opt.styleVariables) : filesBuffer,\n        // Parse variable decarations from files\n        parseVariablesPromise = variableParser.parseVariableDeclarationsFromFiles(variableFiles, opt);\n\n      Q.all([parseKSSPromise, parseVariablesPromise]).spread(function(sections, variables) {\n        styleguide.sections = sections;\n        styleguide.variables = variables;\n\n        // Extend config with Angular directives declared in KSS\n        opt.filesConfig = angularFiles.add(opt.filesConfig, sections);\n\n        function pushAllFiles() {\n          return through.obj(function(file, enc, cb) {\n            _this.push(file);\n            cb();\n          });\n        }\n\n        function processOverviewMarkdown(opt) {\n          return Q.Promise(function(resolve) {\n            if (!opt.overviewPath) {\n              resolve();\n            }\n            markdown.getStream(opt.overviewPath)\n              .pipe(rename(function(path) {\n                path.basename = 'overview';\n                path.extname = '.html';\n              }))\n              .pipe(pushAllFiles())\n              .on('finish', resolve);\n          });\n        }\n\n        options.enablePug && generatePugMarkup(styleguide, options);\n\n        _.each(styleguideProcessors, function(processor) {\n          processor(styleguide);\n        });\n\n        copyUsedOptionsToJsonConfig(opt, styleguide);\n        appendUsedVariablesToEachBlock(opt, styleguide);\n        addFileHashesAndReplaceAbsolutePaths(styleguide);\n\n        // Create JSON containing KSS data\n        _this.push(new File({\n          path: 'styleguide.json',\n          contents: new Buffer(JSON.stringify(styleguide))\n        }));\n\n        var stylesCompiled,\n          overviewProcessed,\n          filesCopied,\n          favIcon,\n          indexHtmlProcessed;\n\n        overviewProcessed = processOverviewMarkdown(opt);\n        var cssSrc = [distPath + '/css/styleguide-app.css', distPath + '/css/styleguide_helper_elements.css'];\n\n        // Copy all files (except index.html) from dist from to output stream\n        filesCopied = Q.Promise(function(resolve) {\n          //gulp.src([distPath + '/**', '!' + distPath + '/index.html', + '!' + distPath + '**/*.css'])\n          var copySrc = [distPath + '/**', '!' + distPath + '/index.html'];\n\n          copySrc = copySrc.concat(cssSrc.map(function(item){\n            return '!' + item;\n          }));\n\n          gulp.src(copySrc)\n            .pipe(pushAllFiles())\n            .on('finish', resolve);\n        });\n\n        // Copy favicon file into asset folder\n        favIcon = Q.Promise(function(resolve) {\n          // If we have custom colors defined. Overwrite default empty file\n          if (opt.favIcon) {\n            try {\n              fs.copySync(opt.favIcon, distPath + '/assets/img/favicon.ico');\n            } catch (err) {\n              console.log('ERROR: Favicon option is defined but the file is not copyable. Using default favicon.');\n            }\n          }\n          resolve();\n        });\n\n        // Compile UI styles\n        stylesCompiled = Q.Promise(function(resolve) {\n\n          // If we have custom colors defined. Overwrite default empty file\n          if (opt.customColors) {\n            try {\n              fs.copySync(opt.customColors, distPath + '/css/_styleguide_custom_variables.css');\n              // Add directory of custom colors file to SASS includePaths\n              // This allows to including external files in custom variable file\n            } catch (err) {\n              console.log('ERROR: customColors option is defined but the file is not copyable. Using default colors.');\n            }\n          }\n          gulp.src(cssSrc)\n            .pipe(replace('{{{appRoot}}}', opt.appRoot))\n            .pipe(postcss([\n              require('postcss-partial-import'),\n              require('postcss-mixins'),\n              require('cssnext'),\n              require('postcss-advanced-variables'),\n              require('postcss-conditionals'),\n              require('postcss-color-function'),\n              require('postcss-color-alpha'),\n              require('postcss-nested'),\n              require('postcss-custom-media'),\n              require('autoprefixer'),\n              require('postcss-inline-comment')\n            ]))\n            // Strings hack\n            .pipe(replace(/url\\((.*)\\)/g, function(replacement, parsedPath) {\n              return 'url(\\'' + parsedPath.replace(/'/g, '') + '\\')';\n            }))\n            .pipe(pushAllFiles())\n            .on('finish', resolve);\n        });\n\n        // Process index.html\n        indexHtmlProcessed = Q.Promise(function(resolve) {\n          gulp.src([distPath + '/index.html'])\n            .pipe(mustache({\n              title: opt.title,\n              extraHead: opt.extraHead,\n              beforeBody: opt.beforeBody,\n              afterSections: opt.afterSections,\n              afterBody: opt.afterBody,\n              sideNav: opt.sideNav,\n              showMarkupSection: opt.showMarkupSection,\n              hideSubsectionsOnMainSection: opt.hideSubsectionsOnMainSection,\n              styleguideConfig: JSON.stringify(copyUsedOptionsToInlineJsonConfig(opt, {}).config),\n              appRoot: opt.appRoot,\n              socketIo: opt.server,\n              filesConfig: JSON.stringify(groupModuleFiles(opt.filesConfig))\n            }))\n            .pipe(pushAllFiles())\n            .on('finish', resolve);\n        });\n\n        Q.all([stylesCompiled, overviewProcessed, filesCopied, favIcon, indexHtmlProcessed])\n          .then(function() {\n            if (opt.server) {\n              opt.fileHashes = fileHashes;\n              startServer(opt);\n            }\n            emitCompileSuccess();\n          })\n          .catch(function(error) {\n            console.error(error.stack || error.message);\n            emitCompileError(error);\n          })\n          .finally(callback);\n      }).catch(function(error) {\n        console.error(error.stack || error.message);\n        emitCompileError(error);\n        callback();\n      });\n    }\n  ).on('error', console.error.bind(console)).on('end', function() {\n    emitProgressEnd();\n  });\n};\n\n/* Build pseudo styles and ay rules from preprocessed CSS styles */\n\nmodule.exports.applyStyles = function() {\n  var throughOpts = {\n    objectMode: true,\n    allowHalfOpen: false\n  }, stylesBuffer = '',\n    pseudoStylesBuffer = '',\n    atRulesBuffer = '';\n\n  function bufferFileContents(file, enc, done) {\n    var pseudoStylesPromise,\n      atRulesPromise;\n\n    // Make sure file goes through the next gulp plugin\n    // jshint -W040\n    this.push(file);\n    // jshint +W040\n\n    // Process only CSS files\n    // For example gulp-ruby-sass generatsd sourcemaps to the stream that we do not want to include\n    if (path.extname(file.path) !== '.css') {\n      done();\n      return;\n    }\n\n    // Add styles to common stylesheet\n    stylesBuffer += file.contents.toString();\n\n    // Create stylesheet that contains pseudo styles\n    pseudoStylesPromise = Q.Promise(function(resolve) {\n      pseudoStylesBuffer += pseudoSelectors.stylesFromString(file.contents.toString(), {\n        source: file.path\n      });\n      resolve();\n    });\n\n    // Create stylesheet that contains at-rules\n    atRulesPromise = Q.Promise(function(resolve) {\n      atRulesBuffer += atRules.stylesFromString(file.contents.toString(), {\n        source: file.path\n      });\n      resolve();\n    });\n\n    Q.all([pseudoStylesPromise, atRulesPromise]).then(function() {\n      done();\n    });\n  }\n\n  return through(throughOpts, bufferFileContents, function(cb) {\n    this.push(new File({\n      path: 'styleguide.css',\n      contents: new Buffer(stylesBuffer)\n    }));\n\n    this.push(new File({\n      path: 'styleguide_pseudo_styles.css',\n      contents: new Buffer(pseudoStylesBuffer)\n    }));\n\n    this.push(new File({\n      path: 'styleguide_at_rules.css',\n      contents: new Buffer(atRulesBuffer)\n    }));\n\n    cb();\n  }).on('end', function() {\n    if (socketIsOpen()) {\n      serverInstance[sgOptions.port].io.emitStylesChanged();\n    }\n  });\n};\n\n/* Built-in server */\n\nmodule.exports.server = function(options) {\n  return startServer(options);\n};\n\nfunction startServer(options) {\n  // Ignore start server if we already have instance running on the same port\n  if (!serverInstance) {\n    serverInstance = {};\n  }\n  if (!serverInstance[options.port]) {\n    var port = options.port;\n    serverInstance[port] = sgServer(options);\n    serverInstance[port].app.set('port', port);\n    serverInstance[port].server.listen(serverInstance[port].app.get('port'), function() {\n      console.log('Express server listening on port ' + serverInstance[port].server.address().port);\n    }).on('error', function(error) {\n      if (error.code === 'EADDRINUSE') {\n        console.error('Port:' + port + ' is already in use.');\n        console.error('Please provide port using --port <port>');\n      }\n    });\n  }\n  return serverInstance[options.port];\n}\n\nmodule.exports.addSection = addSection;\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/markdown.js":"'use strict';\n\nvar vfs = require('vinyl-fs'),\n  md = require('markdown-it')({\n    html: true\n  }),\n  through = require('through2'),\n  cheerio = require('cheerio'),\n  excludeLinks = [\n    'https://travis-ci.org/SC5/sc5-styleguide',\n    'https://david-dm.org/SC5/sc5-styleguide'\n  ];\n\nfunction dasherize(str) {\n  return str.replace(/\\s/ig, '-').toLowerCase();\n}\n\nmodule.exports = {\n  getStream: function(filePath) {\n    return vfs.src(filePath)\n      .pipe(this.processStream());\n  },\n\n  processStream: function() {\n    var _this = this,\n    throughOpts = {\n      objectMode: true,\n      allowHalfOpen: false\n    };\n\n    function bufferFileContents(file, enc, done) {\n      file.contents = new Buffer(_this.render(file.contents.toString()));\n      // jshint -W040\n      this.push(file);\n      // jshint +W040\n      done();\n    }\n\n    return through(throughOpts, bufferFileContents, function(cb) {\n      cb();\n    });\n  },\n\n  render: function(string) {\n    if (!string) {\n      return '';\n    }\n    return this.processHtml(md.render(string));\n  },\n\n  processHtml: function(html) {\n    var $ = cheerio.load(html);\n    // Switch fence code block with angular-highlightjs friendly div\n    $('pre > code').each(function() {\n      var code = $(this);\n      var lang = '';\n      // Capture any \"language-\" className values\n      if (code.attr('class')) {\n        lang = code.attr('class').split(/\\s+/).reduce(function(pv, cv) {\n          return pv + (cv.startsWith('language-') ? cv.substr(9 - cv.length) + ' ' : '');\n        }, '').trim();\n      }\n      // Replace parent PRE element with hljs attributed DIV\n      code.parent().replaceWith(\n          '<div hljs' + (lang.length ? ' hljs-language=\"' + lang + '\"' : '') + '>' +\n          code.html() +\n          '</div>'\n      );\n    });\n    $('p, a, li, pre, h1, h2, h3, h4, h5, h6, table, thead, tbody, tr, th, td').not('[sg-no-style]').addClass('sg');\n    excludeLinks.forEach(function(link) {\n      $('a[href^=\"' + link + '\"]').remove();\n    });\n    $('h1, h2, h3, h4, h5, h6').each(function() {\n      $(this).attr('name', dasherize($(this).text()));\n    });\n    // Add scroll directive to anchor links\n    $('a').each(function() {\n      var target = this.attribs && this.attribs.href;\n      if (target && target.substring(0, 1) === '#') {\n        $(this).attr('du-smooth-scroll', 'yes');\n      }\n    });\n    return $.html();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/at-rules.js":"'use strict';\n\nvar css = require('css');\n\nmodule.exports = {\n  stylesFromString: function(string, options) {\n    var ast;\n\n    try {\n      ast = css.parse(string, options);\n    } catch (err) {\n      console.error('An error occurred when extracting at-rules:', err.toString());\n    }\n\n    ast.stylesheet.rules = ast.stylesheet.rules.filter(function(rule) {\n      return rule.type === 'keyframes' || rule.type === 'font-face';\n    });\n\n    return css.stringify(ast);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/variable-parser.js":"'use strict';\n\nvar scssParser = require('./parsers/scss'),\n    lessParser = require('./parsers/less'),\n    postcssParser = require('./parsers/postcss'),\n    path = require('path'),\n    Q = require('q'),\n    _ = require('lodash'),\n    ignoreBlock = require('./ignore-block');\n\nfunction getParserForSyntax(syntax, options) {\n  var parserName;\n  if (options) {\n    parserName = options.parsers[syntax];\n  }\n  if (parserName === 'less') {\n    return lessParser;\n  } else if (parserName === 'sass' || parserName === 'scss') {\n    // SCSS parser supports SCSS and SASS\n    scssParser.setSyntax(parserName);\n    return scssParser;\n  } else if (parserName === 'postcss') {\n    return postcssParser;\n  }\n  return;\n}\n\n// Parse Style variables to object\nfunction parseVariableDeclarations(string, syntax, options) {\n  string = ignoreBlock.removeIgnoredBlocks(string);\n  var parser = getParserForSyntax(syntax, options);\n  if (parser) {\n    return parser.parseVariableDeclarations(string);\n  }\n  return [];\n}\n\n// Parse Style variables to object\nfunction findVariables(string, syntax, options) {\n  string = ignoreBlock.removeIgnoredBlocks(string);\n  var parser = getParserForSyntax(syntax, options);\n  if (parser) {\n    return parser.findVariables(string);\n  }\n  return [];\n}\n\nfunction setVariables(string, syntax, variables, options) {\n  var parser = getParserForSyntax(syntax, options);\n  if (parser) {\n    return parser.setVariables(string, variables, options);\n  }\n  return string;\n}\n\nfunction parseVariableDeclarationsFromFiles(files, options) {\n  var filePromises = Object.keys(files).map(function(filePath) {\n    var contents = files[filePath],\n        syntax = path.extname(filePath).substring(1);\n\n    return Q.promise(function(resolve) {\n      var fileVariables = parseVariableDeclarations(contents, syntax, options);\n      // Map correct file name to every variable\n      fileVariables.forEach(function(variable) {\n        variable.file = filePath;\n      });\n      resolve(fileVariables);\n    });\n  });\n\n  return Q.all(filePromises).then(function(results) {\n    return _.chain(results).flatten().sortBy('file').value();\n  });\n}\n\nfunction findModifierVariables(modifiers) {\n  var out = [];\n  if (modifiers) {\n    modifiers.forEach(function(modifier) {\n      if (/^[\\@|\\$|\\-\\-]/.test(modifier.name)) {\n        out.push(modifier.name.substring(1));\n      }\n    });\n  }\n  return out;\n}\n\nmodule.exports = {\n  parseVariableDeclarations: parseVariableDeclarations,\n  parseVariableDeclarationsFromFiles: parseVariableDeclarationsFromFiles,\n  findVariables: findVariables,\n  setVariables: setVariables,\n  findModifierVariables: findModifierVariables\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/parsers/scss.js":"var gonzales = require('gonzales-pe'),\n    traverser = require('./ast-traverser'),\n    oldTraverser = require('../ast-traverser'),\n    syntax = 'scss';\n\nfunction setSyntax(newSyntax) {\n  syntax = newSyntax;\n}\n\n// Parse Style variables to object\nfunction parseVariableDeclarations(string) {\n  // Do not parse empty files. Otherwise gonzales.parse will fail\n  if (!string) {\n    return [];\n  }\n\n  var out = [],\n      ast = gonzales.parse(string, {\n        syntax: syntax\n      }),\n      visitor = {\n        // Visitor for SASS, SCSS and plain CSS syntaxes\n        test: function(name, nodes) {\n          if (name !== 'declaration') {\n            return false;\n          }\n\n          if (\n              nodes.content[0] &&\n              nodes.content[0].content &&\n              nodes.content[0].content[0] &&\n              nodes.content[0].content[0].type &&\n              nodes.content[0].content[0].type === 'variable'\n            ) {\n            return true;\n          }\n\n        },\n        process: function(nodes) {\n          var varName = nodes.content[0].content[0].content[0].content;\n\n          // trim the spaces\n          var content = nodes.content.filter(function(item) {\n            return (item.type !== 'space');\n          });\n\n          if (content[2] && content[2].type && content[2].type === 'value') {\n            out.push({\n              name: varName,\n              value: content[2].toString(syntax),\n              line: content[2].start.line\n            });\n          }\n        }\n      };\n\n  traverser.traverse(ast, visitor);\n  return out;\n}\n\n// Parse Style variables to object\nfunction findVariables(string) {\n  // Do not parse empty files. Otherwise gonzales.parse will fail\n  if (!string) {\n    return [];\n  }\n\n  var out = [],\n      ast = gonzales.parse(string, {\n        syntax: syntax\n      }),\n      visitor = {\n        // Visitor for SASS, SCSS and plain CSS syntaxes\n        test: function(name, nodes) {\n          return (name === 'declaration' && nodes.content[0].content[0].type === 'variable') || (name === 'variable' && nodes.content[0].type === 'ident');\n        },\n        process: function(nodes) {\n          if (nodes.type !== 'declaration') {\n            out.push(nodes.content[0].content);\n          }\n        }\n      };\n\n  traverser.traverse(ast, visitor);\n  return out;\n}\n\nfunction setVariables(string, variables) {\n  var ast = gonzales.parse(string, {\n    syntax: syntax\n  });\n\n  variables.forEach(function(variable) {\n    traverser.traverse(ast, {\n      // Visitor for SASS, SCSS and plain CSS syntaxes\n      test: function(name, nodes) {\n        return name === 'declaration' && nodes.content[0].content[0].type === 'variable';\n      },\n      process: function(nodes) {\n        var varName = nodes.content[0].content[0].content[0].content;\n        if (varName === variable.name && nodes.content[3]) {\n          nodes.content[3].content = variable.value;\n        }\n      }\n    });\n  });\n\n  return ast.toString(syntax);\n}\n\nfunction splitCodeAndCommentBlocks(source, syntax) {\n    var ast = gonzales.parse(source, {\n          syntax: syntax\n        }),\n        block,\n        blocks = [],\n        prevNode;\n\n    oldTraverser.traverse(ast, [{\n      // Visitor for SASS and SCSS syntaxes\n      test: function(name) {\n        return name !== 'stylesheet';\n      },\n      process: function(nodes) {\n        var startNewBlock = function(position) {\n          block && blocks.push(block);\n          block = {\n            type: '',\n            position: position,\n            content: ''\n          };\n        },\n        type;\n        // Calculate type of the current block\n        // Multiline comment is comment\n        if (nodes.type === 'multilineComment') {\n          type = 'comment';\n        }\n        // Singleline comment is comment\n        else if (nodes.type === 'singlelineComment') {\n          type = 'comment';\n        }\n        // Single breaklines between singleline comments are comments\n        else if (nodes.type === 'space' && nodes.content.split('\\n').length <= 2 && prevNode && prevNode.type === 'singlelineComment') {\n          type = 'comment';\n        }\n        else {\n          type = 'code';\n        }\n\n        if (!block || block.type !== type) {\n          startNewBlock(nodes.start);\n        }\n        // Extend current block content\n        block.type = type;\n        block.content += nodes.toString(syntax);\n        prevNode = nodes;\n      }\n    }]);\n    // push last block\n    if (block) {\n      blocks.push(block);\n    }\n    return blocks;\n}\n\nmodule.exports = {\n  parseVariableDeclarations: parseVariableDeclarations,\n  findVariables: findVariables,\n  setVariables: setVariables,\n  setSyntax: setSyntax,\n  splitCodeAndCommentBlocks: splitCodeAndCommentBlocks\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/parsers/ast-traverser.js":"function tree(node, visitor) {\n  if (typeof node !== 'object') {\n    return node;\n  }\n  //console.log('Accessing node', visitor)\n  if (visitor && visitor.test && visitor.test(node.type, node)) {\n    node = visitor.process(node);\n    if (!node) {\n      return;\n    }\n  }\n  var res = [node.type];\n  //console.log(\"-- child length\", node.content.length)\n  if (node.content) {\n    for (var i = 0; i <= node.content.length; i++) {\n      var n = tree(node.content[i], visitor);\n      if (n) {\n        res.push(n);\n      }\n    }\n  }\n  return res;\n}\n\nmodule.exports = {\n  traverse: function traverse(ast, visitor) {\n    return tree(ast, visitor);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/ast-traverser.js":"function tree(node, visitor) {\n  if (typeof node !== 'object') {\n    return node;\n  }\n  //console.log('Accessing node', visitor)\n  if (visitor && visitor.test && visitor.test(node.type, node)) {\n    node = visitor.process(node);\n    if (!node) {\n      return;\n    }\n  }\n  var res = [node.type];\n  //console.log(\"-- child length\", node.content.length)\n  if (node.content) {\n    for (var i = 0; i <= node.content.length; i++) {\n      var n = tree(node.content[i], visitor);\n      if (n) {\n        res.push(n);\n      }\n    }\n  }\n  return res;\n}\n\nmodule.exports = {\n  traverse: function traverse(ast, visitors) {\n    visitors.forEach(function(visitor) {\n      ast = tree(ast, visitor);\n    });\n    return ast;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/parsers/less.js":"var gonzales = require('gonzales-pe');\n\n// Parse Style variables to object\nfunction parseVariableDeclarations(string) {\n\n  // Do not parse empty files. Otherwise gonzales.parse will fail\n  if (!string) {\n    return [];\n  }\n\n  var out = [],\n      ast = gonzales.parse(string, {\n        syntax: 'less'\n      });\n  // Exclude functions arguments\n  ast.traverse(function(node, index, parent) {\n    if (node.is('arguments')) {\n      parent.removeChild(index);\n    }\n  });\n  ast.traverseByType('declaration', function(decl) {\n    // Only consider @variable: value declarations\n    var varName,\n        varFullName,\n        varVal = '',\n        varLine = 1;\n    decl.traverseByType('variable', function(varNode) {\n      varName = varNode.content.toString();\n      varFullName = varNode.toString();\n      decl.traverseByType('value', function(valNode) {\n        varVal = valNode.toString();\n        varLine = valNode.start.line;\n      });\n      if (varFullName !== varVal) {\n        out.push({\n          name: varName,\n          value: varVal.trim(),\n          line: varLine\n        });\n      }\n    });\n  });\n  return out;\n}\n\n// Parse Style variables to object\nfunction findVariables(string) {\n  // Do not parse empty files. Otherwise gonzales.parse will fail\n  if (!string) {\n    return [];\n  }\n\n  var out = [],\n      ast = gonzales.parse(string, {\n        syntax: 'less'\n      });\n\n  ast.traverseByType('value', function(subAst) {\n    subAst.traverseByType('variable', function(node) {\n      out.push(node.content.toString());\n    });\n  });\n\n  return out;\n}\n\nfunction setVariables(string, variables) {\n\n  var ast = gonzales.parse(string, {\n    syntax: 'less'\n  });\n\n  variables.forEach(function(variable) {\n\n    ast.traverseByType('declaration', function(decl) {\n      // Only consider @variable: value declarations\n      var varName,\n          varFullName,\n          varVal = '';\n      decl.traverseByType('variable', function(varNode) {\n        varName = varNode.content.toString();\n        varFullName = varNode.toString();\n        decl.traverseByType('value', function(valNode) {\n          varVal = valNode.toString();\n        if (varName !== variable.name) {\n          return;\n        }\n        if (varFullName === varVal) {\n          return;\n        }\n        // Skip functions\n        if (valNode.contains('function')) {\n          return;\n        }\n        var newVal = gonzales.createNode({ type: 'string', content: variable.value, syntax: 'less' });\n        valNode.content = [newVal];\n        });\n      });\n    });\n\n  });\n  return ast.toString();\n}\n\nmodule.exports = {\n  parseVariableDeclarations: parseVariableDeclarations,\n  findVariables: findVariables,\n  setVariables: setVariables\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/parsers/postcss.js":"var postcss = require('postcss'),\n  // A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS)\n  // `--foo`\n  // See: http://dev.w3.org/csswg/css-variables/#custom-property\n  RE_VAR_PROP = (/(--(.+))/),\n  RE_VAR_FUNC = (/var\\((--[^,\\s]+?)(?:\\s*,\\s*(.+))?\\)/);\n\nfunction cleanVariableName(name) {\n  return name.replace(/^\\-\\-/, '');\n}\n\nfunction parseVariableDeclarations(string) {\n  if (!string) {\n    return [];\n  }\n\n  var out = [],\n    ast = postcss.parse(string);\n  // Loop through all of the declarations and grab the variables and put them in the map\n  ast.eachDecl(function(decl) {\n    // If declaration is a variable\n    if (RE_VAR_PROP.test(decl.prop)) {\n      out.push({\n        name: cleanVariableName(decl.prop),\n        value: decl.value,\n        line: decl.source.start.line\n      });\n    }\n  });\n  return out;\n}\n\nfunction findVariables(string) {\n  if (!string) {\n    return [];\n  }\n\n  var out = [],\n    ast = postcss.parse(string);\n\n  ast.eachRule(function(rule) {\n    rule.nodes.forEach(function(node) {\n      if (node.type === 'decl') {\n        var decl = node;\n        if (RE_VAR_FUNC.test(decl.value) && !RE_VAR_PROP.test(decl.prop)) {\n          out.push(cleanVariableName(decl.value.match(RE_VAR_FUNC)[1]));\n        }\n      }\n    });\n  });\n  return out;\n}\n\nfunction setVariables(string, variables) {\n  var ast = postcss.parse(string);\n  // Loop through all of the declarations and change variable values\n  variables.forEach(function(variable) {\n    ast.eachDecl(function(decl) {\n      // If declaration is a variable\n      if (RE_VAR_PROP.test(decl.prop) && decl.prop === '--' + variable.name) {\n        decl.value = variable.value;\n      }\n    });\n  });\n  return ast.toString();\n}\n\nfunction splitCodeAndCommentBlocks(string) {\n  var ast = postcss.parse(string);\n  var blocks = [];\n  ast.nodes.forEach(function(node) {\n    var block = {\n      type: node.type === 'comment' ? 'comment' : 'code',\n      content: node.toString()\n    };\n    blocks.push(block);\n  });\n  return blocks;\n}\n\nmodule.exports = {\n  parseVariableDeclarations: parseVariableDeclarations,\n  findVariables: findVariables,\n  setVariables: setVariables,\n  splitCodeAndCommentBlocks: splitCodeAndCommentBlocks\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/ignore-block.js":"\nfunction removeIgnoredBlocks(string) {\n  var lines = string.split('\\n'),\n    results = [],\n    ignoreEnabled = false;\n  lines.forEach(function(line) {\n    if (line.indexOf('styleguide:ignore:start') !== -1) {\n      results.push('');\n      ignoreEnabled = true;\n    } else if (line.indexOf('styleguide:ignore:end') !== -1) {\n      results.push('');\n      ignoreEnabled = false;\n    } else if (ignoreEnabled) {\n      results.push('');\n    } else {\n      results.push(line);\n    }\n  });\n  return results.join('\\n');\n}\n\nmodule.exports = {\n  removeIgnoredBlocks: removeIgnoredBlocks\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/kss-parser.js":"'use strict';\nvar kss = require('kss'),\n  fs = require('fs'),\n  path = require('path'),\n  Q = require('q'),\n  gutil = require('gulp-util'),\n  kssSplitter = require('./kss-splitter'),\n  kssAdditionalParams = require('./kss-additional-params'),\n  kssSanitizeParams = require('./kss-sanitize-params'),\n  markdown = require('./markdown'),\n  _ = require('lodash');\n\n// Parses kss.KssSection to JSON\nfunction jsonSections(sections, block) {\n\n  return sections.map(function(section) {\n    // Temporary inserting of partial\n    var partial = section;\n    if (partial.markup() && partial.markup().toString().match(/^[^\\n]+\\.(html|hbs)$/)) {\n      partial.file = partial.markup().toString();\n      partial.name = path.basename(partial.file, path.extname(partial.file));\n      partial.file = path.dirname(block.filePath) + '/' + partial.file;\n      partial.markupText = fs.readFileSync(partial.file, 'utf8');\n      section.markup = function() {\n        return partial.markupText;\n      };\n    }\n\n    return {\n      header: generateDescription(section.header(), {noWrapper: true}),\n      description: generateDescription(section.description()),\n      modifiers: jsonModifiers(section.modifiers()),\n      deprecated: section.deprecated(),\n      experimental: section.experimental(),\n      reference: section.reference(),\n      markup: section.markup() ? section.markup().toString() : null\n    };\n  });\n}\n\n// Parses kss.KssModifier to JSON\nfunction jsonModifiers(modifiers) {\n  return modifiers.map(function(modifier, id) {\n    return {\n      id: id + 1,\n      name: modifier.name(),\n      description: modifier.description(),\n      className: modifier.className(),\n      markup: modifier.markup() ? modifier.markup().toString() : null\n    };\n  });\n}\n\nfunction trimLinebreaks(str) {\n  // Remove leading and trailing linebreaks\n  if (!str) {\n    return str;\n  }\n  return str.replace(/^[\\r\\n]+|[\\r\\n]+$/g, '');\n}\n\nfunction generateDescription(string, options) {\n  var desc = markdown.render(string);\n  if (options && options.noWrapper) {\n    // Remove wrapping p tags\n    desc = desc.replace(/^<p class=\"sg\">/, '');\n    desc = desc.replace(/<\\/p>\\n$/, '');\n  }\n  return desc;\n}\n\nfunction processBlock(block, options) {\n  return Q.Promise(function(resolve, reject) {\n\n    // Get additional params\n    var additionalParams = kssAdditionalParams.get(block.kss);\n\n    block.sanitizedKss = kssSanitizeParams(block.kss);\n\n    // Parse with original KSS library\n    kss.parse(block.sanitizedKss, options, function(err, styleguide) {\n      var section,\n        blockStyles;\n      if (err) {\n        console.error('  error processing kss block', err);\n        reject(err);\n        return false;\n      } else {\n        section = jsonSections(styleguide.section(), block);\n\n        if (section.length > 0) {\n          if (section.length > 1) {\n            console.warn('Warning: KSS splitter returned more than 1 KSS block. Styleguide might not be properly generated.');\n          }\n\n          blockStyles = trimLinebreaks(block.code);\n\n          // Add extra parameters\n          section[0] = _.assign(section[0], additionalParams);\n\n          // Add related CSS to section\n          if (blockStyles && blockStyles !== '') {\n            section[0].css = blockStyles;\n          }\n        }\n        resolve(section);\n      }\n    });\n  });\n}\n\nfunction processFile(contents, filePath, syntax, options, parser) {\n  if (!contents || contents.length === 0) {\n    return Q.resolve([]);\n  }\n\n  return Q.Promise(function(resolve, reject) {\n    var blockPromises = [],\n        blocks;\n    try {\n      blocks = kssSplitter.getBlocks(contents, syntax, parser);\n\n      // Process every block in the current file\n      blocks.forEach(function(block) {\n        // Let block know about its file path\n        block.filePath = filePath;\n        blockPromises.push(processBlock(block, options));\n      });\n    } catch (err) {\n      reject(err);\n    }\n    Q.all(blockPromises).then(function(results) {\n      resolve(results.reduce(function(memo, result) {\n        var blockResult = result.valueOf();\n        if (blockResult && blockResult.length > 0) {\n          // Map syntax to every block. This is later used when parsing used variables\n          // Finally add sections to array\n          return memo.concat(blockResult.map(function(currentBlock) {\n            currentBlock.syntax = syntax;\n            currentBlock.file = filePath;\n            return currentBlock;\n          }));\n        }\n        return memo;\n      }, []));\n    })\n    .catch(function(err) {\n      console.error('Styleguide generation failed');\n      console.error('Error: %s in %s', err, filePath);\n    });\n  });\n}\n\nfunction toInt(s) {\n  return parseInt(s, 10);\n}\n\nfunction quote(s) {\n  return '\"' + s + '\"';\n}\n\nfunction bySectionReference(x, y) {\n  var xs = x.reference.split('.').map(toInt),\n      ys = y.reference.split('.').map(toInt),\n      len = Math.min(xs.length, ys.length),\n      cmp, i;\n  for (i = 0; i < len; i += 1) {\n    cmp = xs[i] - ys[i];\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  len = xs.length - ys.length;\n  if (len === 0) {\n    throw new gutil.PluginError('kss-parser', 'Two sections defined with same number ' +\n      x.reference + ': ' + quote(x.header) + ' and ' + quote(y.header));\n  }\n  return len;\n}\n\nmodule.exports = {\n  // Parse node-kss object ( {'file.path': 'file.contents.toString('utf8'}' )\n  parseKssSections: function(files, options, parsers) {\n    return Q.Promise(function(resolve, reject) {\n      var filePromises = [],\n        sections = [];\n\n      // Process every file\n      Object.keys(files).forEach(function(filePath) {\n        var contents = files[filePath],\n          syntax = path.extname(filePath).substring(1),\n          parser = parsers  ? parsers[syntax] : 'undefined';\n        filePromises.push(processFile(contents, filePath, syntax, options, parser));\n      });\n      // All files are processed\n      Q.all(filePromises).then(function(results) {\n        // Combine sections from every file to a single array\n        results.map(function(result) {\n          var fileSections = result.valueOf();\n          if (fileSections && fileSections.length > 0) {\n            sections = sections.concat(fileSections);\n          }\n        });\n\n        // Sort sections by reference number and call main promise\n        try {\n          sections.sort(bySectionReference);\n          resolve(sections);\n        } catch (err) {\n          reject(err);\n        }\n      }).catch(reject);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/kss-splitter.js":"'use strict';\n\nvar postcssParser = require('./parsers/postcss'),\n    scssParser = require('./parsers/scss'),\n    ignoreBlock = require('./ignore-block');\n\nmodule.exports = {\n\n  /* Split string source into array of code and comment blocks */\n  pureSplitter: function(source, syntax, parser) {\n    syntax = syntax || 'scss';\n    source = ignoreBlock.removeIgnoredBlocks(source);\n\n    var blocks;\n    if (parser === 'postcss') {\n      blocks = postcssParser.splitCodeAndCommentBlocks(source);\n    } else {\n      // Suits all the syntaxes\n      blocks = scssParser.splitCodeAndCommentBlocks(source, syntax);\n    }\n    return blocks;\n  },\n\n  getBlocks: function(source, syntax, parser) {\n    var blocks = this.pureSplitter(source, syntax, parser),\n      pair = {\n        kss: '',\n        code: []\n      },\n      firstBlock = true,\n      pairs = [],\n      isKssMarkupBlock = /Styleguide [0-9]+/;\n\n    blocks.forEach(function(block) {\n      if (block.type === 'comment') {\n        // Check if KSS\n        if (isKssMarkupBlock.test(block.content)) {\n          // Save old pair\n          if (pair && !firstBlock) {\n            pair.code = pair.code.join('');\n            pairs.push(pair);\n          }\n          // KSS starts a new block\n          pair = {\n            kss: block.content,\n            code: []\n          };\n        } else {\n          // Not KSS comments are considered to be parts of code\n          pair.code.push(block.content);\n        }\n      } else {\n        pair.code.push(block.content);\n      }\n\n      firstBlock = false;\n\n    });\n\n    // Push last pair\n    pair.code = pair.code.join('');\n    pairs.push(pair);\n\n    return pairs;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/kss-additional-params.js":"'use strict';\n\nfunction trimLinebreaks(str) {\n  // Remove leading and trailing linebreaks\n  if (!str) {\n    return str;\n  }\n  return str.replace(/^[\\r\\n]+|[\\r\\n]+$/g, '');\n}\n\nfunction standardizeLinebreaks(str) {\n  // Replace windows and mac line endings to unix line endings convention\n  if (!str) {\n    return str;\n  }\n  return str.replace(/\\r?\\n|\\r/g, '\\n');\n}\n\n// A list of params which need values parsing\nvar ComplexParams = [\n  'sg-angular-directive'\n];\n\nmodule.exports = {\n\n  /* Parses additional KSS params for the styleguide */\n  get: function(source) {\n\n    // Remove comment markup from comments\n    var comment = source.split(/\\/\\/[ ]?/).join('').split('/*').join('').split('*/').join(''),\n      additionalKssParams = {},\n      _this = this;\n\n    comment = standardizeLinebreaks(comment);\n    comment = trimLinebreaks(comment);\n\n    comment.split('\\n\\n').forEach(function(markUpBlock) {\n\n      var varName = markUpBlock.match(/([^:^\\n]*):[\\s\\S]*\\n/);\n      if (varName && varName[1] !== undefined) {\n        varName = varName[1].trim();\n      }\n      if (varName && varName.substring(0, 3) === 'sg-') {\n        additionalKssParams[varName] = _this.getValue(varName, markUpBlock);\n      }\n\n    });\n\n    return additionalKssParams;\n  },\n\n  /* Parses values */\n  getValue: function(varName, source) {\n\n    var body = source.substring(source.indexOf('\\n') + 1),\n      result;\n\n    // Do not parse every variable\n    if (ComplexParams.indexOf(varName) === -1) {\n      result = body;\n    } else {\n\n      result = {};\n\n      body.split('\\n').forEach(function(line) {\n\n        var keyVal = line.split(':').map(function(str) {\n          str = str.trim();\n          if (str.indexOf(',') !== -1) {\n            str = str.split(',').map(function(s) {\n              return s.trim();\n            });\n          }\n          return str;\n        });\n\n        if (!result[keyVal[0]]) {\n          // Define new value\n          result[keyVal[0]] = keyVal[1];\n        } else {\n          // Add another value\n          if (!(result[keyVal[0]] instanceof Array)) {\n            result[keyVal[0]] = [\n              result[keyVal[0]]\n            ];\n          }\n          result[keyVal[0]].push(keyVal[1]);\n        }\n\n      });\n    }\n\n    return result;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/kss-sanitize-params.js":"'use strict';\n\nmodule.exports = function(source) {\n\n  var pass = true;\n\n  source = source.split('\\n').filter(function(line) {\n    var varName = line.match(/([\\w\\-]*):[\\s]*$/),\n      isEmptyLine = /^[\\s\\/]*$/.test(line);\n\n    if (varName) {\n      // Named parangraph begins\n\n      if (varName[1].indexOf('sg-') === 0) {\n        // This is a styleguide's named parameter\n\n        pass = false;\n        //console.log(varName[1], line);\n      }\n    }\n\n    // When meets empty line, pass everything again\n    if (isEmptyLine) {\n      pass = true;\n    }\n\n    return pass;\n\n  }).join('\\n');\n\n  return source;\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/angular-files.js":"'use strict';\n\nmodule.exports = {\n\n  /* Puts angular directives declared in sections into config */\n  add: function(config, sections) {\n\n    function add(content) {\n      if (!config) {\n        config = [];\n      }\n      config.push(content);\n    }\n\n    sections.forEach(function(section) {\n\n      if (section['sg-angular-directive']) {\n\n        section['sg-angular-directive'].files = section['sg-angular-directive'].file;\n        if (!(section['sg-angular-directive'].files instanceof Array)) {\n          section['sg-angular-directive'].files = [\n            section['sg-angular-directive'].files\n          ];\n        }\n\n        add(section['sg-angular-directive']);\n      }\n    });\n\n    return config;\n\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/pseudo-selectors.js":"'use strict';\n\nvar css = require('css'),\n    _ = require('lodash');\n\nmodule.exports.stylesFromString = function(cssString, options) {\n  var ast, pseudoRules = [];\n\n  function pseudoMatcher() {\n    var pseudoSelectors = [\n      'hover', 'enabled', 'disabled', 'active', 'visited',\n      'focus', 'target', 'checked', 'empty', 'first-of-type', 'last-of-type',\n      'first-child', 'last-child'\n    ],\n      notInsideParentheses = '(?![^(]*\\\\))';\n    // Match all pseudo selectors that are not inside parentheses\n    return new RegExp('(\\\\:' + (pseudoSelectors.join(notInsideParentheses + '|\\\\:')) + notInsideParentheses + ')', 'g');\n  }\n\n  try {\n    ast = css.parse(cssString, options);\n  } catch (err) {\n    console.error('An error occurred when creating pseudo styles:', err.toString());\n  }\n\n  _.each(ast.stylesheet.rules, function(rule) {\n    // Get only selectors that have pseudo selector\n    rule.selectors = _.filter(rule.selectors, function(selector) {\n      return pseudoMatcher().test(selector);\n    });\n    // Replace selector pseudo class with actual class\n    if (rule.selectors.length > 0) {\n      rule.selectors = _.map(rule.selectors, function(selector) {\n        return selector.replace(pseudoMatcher(), function(matched) {\n          return matched.replace(/\\:/g, '.pseudo-class-');\n        });\n      });\n      pseudoRules.push(rule);\n    }\n  });\n  ast.stylesheet.rules = pseudoRules;\n  return css.stringify(ast);\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/wrapper-markup.js":"var referenceDictionary = require('./reference-dictionary'),\n    buildReferenceDictionary = referenceDictionary.build;\n\nfunction generateSectionWrapperMarkup(sections) {\n  /* Calculate own wrapper */\n  var wrapper,\n      wrapperKeyword = '<sg-wrapper-content/>',\n      wrapperRegExp,\n  // TODO: do not calculate twice\n      index = buildReferenceDictionary(sections);\n\n  return sections.map(function(section) {\n    wrapper = section['sg-wrapper'] || wrapperKeyword;\n    wrapperRegExp = new RegExp(wrapperKeyword, 'g');\n    /* Wrap a wrapper with a parent wrapper */\n    if (section.parentReference) {\n      var parentWrapper = index[section.parentReference].wrapper;\n      wrapper = parentWrapper.replace(wrapperRegExp, wrapper);\n    }\n\n    section.wrapper = wrapper;\n    if (section.markup) {\n      /* Wrap markup */\n      section.renderMarkup = section.markup;\n      section.renderMarkup = section.wrapper.replace(wrapperRegExp, section.markup);\n    }\n\n    /* Wrap modifiers */\n    section.modifiers.forEach(function(modifier) {\n      /* Wrap modifier markup */\n      modifier.renderMarkup = modifier.markup;\n      modifier.renderMarkup = section.wrapper.replace(wrapperRegExp, modifier.markup);\n    });\n\n    /* Clean nested sections */\n    delete section.sections;\n    return section;\n  });\n}\n\nmodule.exports.generateSectionWrapperMarkup = generateSectionWrapperMarkup;\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/reference-dictionary.js":"function buildReferenceDictionary(sections) {\n  var prevSections = [],\n    index = {},\n    nested = {\n      sections: []\n    },\n    cursor = nested.sections;\n\n  sections.forEach(function(section) {\n    var ref = section.reference, par, length;\n    /* Check if the parent section was already mentioned\n     * in the tree */\n    /* Put cursor to the root for the root elements */\n    if (ref.indexOf('.') === -1 || ref.indexOf('.0', ref.length - 2) !== -1) {\n      cursor = nested.sections;\n    }\n    while (ref.indexOf('.') !== -1) {\n      ref = ref.substring(0, ref.lastIndexOf('.'));\n\n      /* Parent section */\n      par = prevSections[prevSections.indexOf(ref)];\n      if (par) {\n        section.parentReference = par;\n        /* Create nested container if it does not exists yet */\n        index[par].sections = index[par].sections || [];\n        cursor = index[par].sections;\n        break;\n      }\n    }\n    prevSections.push(section.reference);\n    /* Remember where we put current section */\n    length = cursor.push(section);\n    index[section.reference] = cursor[length - 1];\n  });\n\n  return index;\n}\n\nmodule.exports.build = buildReferenceDictionary;\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/section-references.js":"var referenceDictionary = require('./reference-dictionary'),\n    buildReferenceDictionary = referenceDictionary.build;\n\nfunction findeAndReplace(section, property, index) {\n  var sectionContentVariable = /<sg\\-insert>([0-9\\.]*)(.*)<\\/sg\\-insert>/,\n      result,\n      modifierPlaceholder = /\\{\\$modifiers\\}/g;\n  // Wrap modifiers\n  function replacer (modifier) {\n    return ((modifier.markup = modifier[property].replace(sectionContentReferenceTag, referencedSectionContent)));\n  }\n  // Concat all modifiers\n  function reduceModifiers (previousValue, currentValue) {\n    return previousValue + currentValue[property].replace(modifierPlaceholder, currentValue.className);\n  }\n  while ((result = sectionContentVariable.exec(section[property]))) {\n    var sectionContentIdentifier = result[1],\n      sectionModifierIdentifier = result[2],\n      referencedSectionContent = '',\n      sectionContentReferenceTag = '<sg-insert>' + sectionContentIdentifier + sectionModifierIdentifier + '</sg-insert>';\n\n    if (index.hasOwnProperty(sectionContentIdentifier) && index[sectionContentIdentifier][property] !== 'undefined') {\n      referencedSectionContent = index[sectionContentIdentifier].markup;\n      // replace modifiers from referenced section\n      if (sectionModifierIdentifier !== '' && sectionModifierIdentifier.length > 1) {\n        sectionModifierIdentifier = sectionModifierIdentifier.substring(1);\n        // If all is the modifier insert all variants..\n        if (sectionModifierIdentifier === 'all') {\n          referencedSectionContent = index[sectionContentIdentifier].modifiers.reduce(reduceModifiers, '');\n        } else {\n          //Arrays start with 0, modifiers with 1 => subtract 1\n          sectionModifierIdentifier = parseInt(sectionModifierIdentifier, 10) - 1;\n          var modifiers = index[sectionContentIdentifier].modifiers;\n          // ..otherwise check if the modifier refered to exists\n          if (modifiers.hasOwnProperty(sectionModifierIdentifier) && modifiers[sectionModifierIdentifier].className !== 'undefined') {\n            var referencedModifierContent = index[sectionContentIdentifier].modifiers[sectionModifierIdentifier].className;\n            referencedSectionContent = referencedSectionContent.replace(modifierPlaceholder, referencedModifierContent);\n          }\n        }\n      }\n      referencedSectionContent = referencedSectionContent.replace(modifierPlaceholder, '');\n    }\n    if (referencedSectionContent === '') {\n      referencedSectionContent = '[ERROR: Referenced section ' + sectionContentIdentifier + ' has no markup!]';\n    } else if (referencedSectionContent.search(sectionContentReferenceTag) > 0) {\n      console.log('You can\\'t reference a section that references the section back as this will end in an endless loop');\n      referencedSectionContent = '[ERROR: Reference to ' + sectionContentIdentifier + ' failed!]';\n    }\n    section[property] = section[property].replace(sectionContentReferenceTag, referencedSectionContent);\n\n    section.modifiers.forEach(replacer);\n  }\n}\n\nfunction replaceReferences(sections) {\n  // TODO: Not to calculate twice\n  var index = buildReferenceDictionary(sections);\n  return sections.map(function(section) {\n    findeAndReplace(section, 'markup', index);\n    findeAndReplace(section, 'sg-wrapper', index);\n    return section;\n  });\n}\n\nmodule.exports.replace = replaceReferences;\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/common.js":"'use strict';\n\nvar path = require('path');\n\nfunction sanitizeOptions(opt) {\n  return {\n    title: opt.title || 'Styleguide Generator',\n    sass: opt.sass || {},\n    less: opt.less || {},\n    css: opt.css || {},\n    kssOpt: opt.kssOpt || {},\n    overviewPath: opt.overviewPath || path.join(__dirname, '/overview.md'),\n    extraHead: (typeof opt.extraHead === 'object') ? opt.extraHead.join('\\n') : opt.extraHead,\n    beforeBody: (typeof opt.beforeBody === 'object') ? opt.beforeBody.join('\\n') : opt.beforeBody,\n    afterBody: (typeof opt.afterBody === 'object') ? opt.afterBody.join('\\n') : opt.afterBody,\n    afterSections: (typeof opt.afterSections === 'object') ? opt.afterSections.join('\\n') : opt.afterSections,\n    additionalNgDependencies: opt.additionalNgDependencies || false,\n    sideNav: opt.sideNav || false,\n    showMarkupSection: opt.showMarkupSection || false,\n    hideSubsectionsOnMainSection: opt.hideSubsectionsOnMainSection || false, \n    disableEncapsulation: opt.disableEncapsulation || false,\n    disableHtml5Mode: opt.disableHtml5Mode || (typeof opt.disableHtml5Mode === 'undefined' && !opt.server) || false,\n    appRoot: opt.appRoot || '',\n    commonClass: opt.commonClass || '',\n    styleVariables: opt.styleVariables || false,\n    customColors: opt.customColors || false,\n    favIcon: opt.favIcon || false,\n    server: opt.server || false,\n    port: opt.port || 3000,\n    disableServerLog: opt.disableServerLog || false,\n    basicAuth: opt.basicAuth || null,\n    rootPath: opt.rootPath,\n    readOnly: opt.readOnly || false,\n    parsers: opt.parsers || {\n      sass: 'sass',\n      scss: 'scss',\n      less: 'less',\n      postcss: 'postcss'\n    },\n    filesConfig: opt.filesConfig,\n    styleguideProcessors: opt.styleguideProcessors || {}\n  };\n}\n\nmodule.exports = {\n  sanitizeOptions: sanitizeOptions\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/helpers/add-section.js":"var through = require('through2'),\n  path = require('path'),\n  gutil = require('gulp-util'),\n  File = require('vinyl'),\n  minimist = require('minimist'),\n\n  kssSplitter = require('../kss-splitter');\n\nmodule.exports = function(options) {\n  var throughOpts = {\n      objectMode: true,\n      allowHalfOpen: false\n    };\n\n  // Parameters\n  var args = minimist(process.argv.slice(2)),\n    params = {\n      name: args.name || args.n,\n      order: args.order || args.o\n    };\n\n  var parsers = options && options.parsers || 'undefined';\n\n  // Validate params\n\n  if (!params.name) {\n    gutil.beep();\n    gutil.log(gutil.colors.red('Define name with --name=my-name'));\n    return;\n  }\n\n  if (!params.order) {\n    gutil.beep();\n    gutil.log(gutil.colors.red('Define name with --order=1.2.3'));\n    return;\n  }\n\n  params.order = params.order.toString();\n\n  var sectionRegExp = /(Styleguide )([0-9]+(\\.[0-9]+)*)/;\n\n  var allFiles = [];\n\n  var nearestSibling = null;\n\n  function isLess(left, right) {\n    left = left.split('.');\n    right = right.split('.');\n\n    var l = false;\n\n    for (var i = 0; i < Math.max(left.length, right.length); i++) {\n      if (parseInt(left[i]) < parseInt(right[i])) {\n        l = true;\n        break;\n      }\n      if (parseInt(left[i]) > parseInt(right[i])) {\n        l = false;\n        break;\n      }\n    }\n\n    return l;\n  }\n\n  function getFinalZeros(number) {\n     var match = number.match(/^(\\d+(?:\\.\\d+)*?)((?:\\.0)*)$/);\n     return {\n       full: number,\n       pure: match[1],\n       zeros: match[2]\n     };\n  }\n\n  /*function isEqual(left, right) {\n    var findZeros = /^(\\d+(?:\\.\\d+)*?)((?:\\.0)*)$/;\n    // Remove ending zeros\n    left = left.match(findZeros);\n    if (left !== null) {\n      left = left[1];\n    } else {\n      return false;\n    }\n    right = right.match(findZeros);\n    if (right !== null) {\n      right = right[1];\n    } else {\n      return false;\n    }\n\n    return (left === right);\n  }*/\n\n  function ifBelongsToParent(parentSection, section) {\n    var belongs = true;\n    parentSection = parentSection && parentSection.split('.');\n    section = section.split('.');\n\n    parentSection && parentSection.forEach(function(val, n) {\n      if (val !== section[n]) {\n        belongs = false;\n      }\n    });\n    return belongs;\n  }\n\n  function increaseSection(section, newSection, diff) {\n    // remove final zeros\n    var normalizedSection = getFinalZeros(section);\n    var normalizedSectionArray = normalizedSection.pure.split('.');\n\n    var normalizedNewSection = getFinalZeros(newSection);\n    var normalizedNewSectionArray = normalizedNewSection.pure.split('.');\n\n    // Shold increase the same register as there are in new section\n    var registerIndex = normalizedNewSectionArray.length - 1;\n    if (normalizedSectionArray[registerIndex]) {\n      normalizedSectionArray[registerIndex] = parseInt(normalizedSectionArray[registerIndex]) + diff;\n    }\n\n    return normalizedSectionArray.join('.') + normalizedSection.zeros;\n  }\n\n  function changeNumber(blocks, order, fileIndex) {\n    return blocks.map(function(block){\n      if (!block.kss) {\n        return block;\n      }\n      var match = block.kss.match(sectionRegExp);\n      var currentNumber = match[2];\n\n      if (isLess(currentNumber, order)) {\n        return block;\n      }\n\n      var parentSection = order.split('.');\n      parentSection.pop();\n      parentSection = parentSection.join('.');\n\n      if (!ifBelongsToParent(parentSection, currentNumber)) {\n        return block;\n      }\n\n      /*if (isEqual(parentSection, currentNumber)) {\n        console.log('isEqual', parentSection, currentNumber);\n        return block;\n      }*/\n\n      var newVal = increaseSection(currentNumber, order, 1);\n\n      block.kss = block.kss.replace(sectionRegExp, '$1' + newVal);\n      allFiles[fileIndex].modified = true;\n\n      return block;\n    });\n  }\n\n  function bufferFileContents(file, enc, done) {\n\n    this.push(file);\n\n    var contents = file.contents.toString(),\n      syntax = path.extname(file.path).substring(1),\n      parser = parsers  ? parsers[syntax] : 'undefined',\n      blocks = kssSplitter.getBlocks(contents, syntax, parser);\n\n    // check if a block is nearest sibling;\n    blocks.forEach(function(block, index) {\n      if (!block.kss) {\n        return;\n      }\n      var match = block.kss.match(sectionRegExp);\n      var currentNumber = match[2];\n      if (!nearestSibling) {\n        nearestSibling = {\n          number: currentNumber,\n          file: file,\n          blockIndex: index\n        };\n        return;\n      }\n\n      // to become a nearestSibling currentNumber should be\n      // less than newNumber but more than actual nearestSibling\n      if (isLess(currentNumber, params.order) && !isLess(currentNumber, nearestSibling.number)) {\n        nearestSibling = {\n          number: currentNumber,\n          file: file,\n          blockIndex: index\n        };\n      }\n    });\n\n    allFiles.push({\n      file: file,\n      blocks: blocks,\n      syntax: syntax\n    });\n    done();\n  }\n\n  return through(throughOpts, bufferFileContents, function(cb) {\n\n    // increment numbers\n    allFiles.forEach(function(fileSource, k) {\n      var blocks = changeNumber(fileSource.blocks, params.order, k);\n      fileSource.blocks = blocks;\n      allFiles[k] = fileSource;\n    });\n\n    // add new section\n    allFiles.forEach(function(fileSource, k) {\n      if(fileSource.file.path === nearestSibling.file.path) {\n\n        var newContent = [\n          params.name,\n          '',\n          'Styleguide ' + params.order\n        ];\n        if (fileSource.syntax === 'css' || fileSource.syntax === 'scss') {\n          newContent.unshift('/*');\n          newContent.push('*/');\n        }\n        if (fileSource.syntax === 'less' || fileSource.syntax === 'sass') {\n          newContent = newContent.map(function(line){\n            return '// ' + line;\n          });\n        }\n\n        fileSource.blocks.splice(nearestSibling.blockIndex + 1, 0, {\n          kss: newContent.join('\\n') + '\\n\\n',\n          code: ''\n        });\n        fileSource.modified = true;\n        allFiles[k] = fileSource;\n      }\n    });\n\n    // write files back\n    var stream = this;\n\n    allFiles.forEach(function(fileSource){\n\n      var content = fileSource.modified ? fileSource.blocks.map(function(block){\n        return block.kss + block.code;\n      }).join('') : fileSource.file.contents;\n\n      stream.push(new File({\n        path: fileSource.file.relative,\n        contents: new Buffer(content)\n      }));\n    });\n\n    cb();\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/server.js":"module.exports = function(options) {\n  var app,\n    cookieParser = require('cookie-parser'),\n    bodyParser = require('body-parser'),\n    express = require('express'),\n    logger = require('morgan'),\n    path = require('path'),\n    basicAuth = require('basic-auth-connect'),\n    io,\n    server,\n    socket;\n\n  app = express();\n\n  //app.use(favicon(__dirname + '/public/favicon.ico'));\n  if (!options.disableServerLog) {\n    app.use(logger('dev'));\n  }\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(cookieParser());\n  if (options.basicAuth) {\n    app.use(basicAuth(options.basicAuth.username, options.basicAuth.password));\n  }\n\n  app.use(express.static(options.rootPath));\n\n  // Let Angular handle all routing\n  app.all('/*', function(req, res) {\n    res.sendFile(path.resolve(options.rootPath + '/index.html'));\n  });\n\n  // Catch 404 and forward to error handler\n  app.use(function(req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n  });\n\n  // Setup socket.io\n  server = require('http').Server(app);\n  socket = require('socket.io')(server);\n  io = require('./modules/io')(socket, options);\n\n  return {\n    app: app,\n    server: server,\n    io: io\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/demo-gulpfile.js":"var gulp = require('gulp'),\n  styleguide = require('./lib/styleguide'),\n  postcss = require('gulp-postcss'),\n  rename = require('gulp-rename'),\n  source = 'lib/app/css/*.css',\n  outputPath = 'demo-output';\n\ngulp.task('styleguide:generate', function() {\n  return gulp.src(source)\n    .pipe(styleguide.generate({\n        title: 'SC5 Styleguide',\n        server: true,\n        rootPath: outputPath,\n        overviewPath: 'README.md',\n        styleVariables: 'lib/app/css/_styleguide_variables.css',\n        parsers: {\n          css: 'postcss'\n        },\n        styleguideProcessors: {\n            40: function(styleguide) {\n                styleguide.sections[0].description = styleguide.sections[0].description + ' [Description from custom Processor]';\n            }\n        }\n      }))\n    .pipe(gulp.dest(outputPath));\n});\n\ngulp.task('styleguide:applystyles', function() {\n  return gulp.src('lib/app/css/styleguide-app.css')\n    .pipe(postcss([\n      require('postcss-partial-import'),\n      require('postcss-mixins'),\n      require('gulp-cssnext'),\n      require('postcss-advanced-variables'),\n      require('postcss-conditionals'),\n      require('postcss-color-function'),\n      require('postcss-color-alpha'),\n      require('postcss-nested'),\n      require('postcss-custom-media'),\n      require('autoprefixer'),\n      require('postcss-inline-comment')\n    ]))\n    .pipe(rename('styleguide-app.css'))\n    .pipe(styleguide.applyStyles())\n    .pipe(gulp.dest(outputPath));\n});\n\ngulp.task('styleguide', ['styleguide:static', 'styleguide:generate', 'styleguide:applystyles']);\n\ngulp.task('styleguide:static', function() {\n  gulp.src(['lib/demo/**'])\n    .pipe(gulp.dest(outputPath + '/demo'));\n});\n\ngulp.task('watch', ['styleguide'], function() {\n  // Start watching changes and update styleguide whenever changes are detected\n  gulp.watch(source, ['styleguide']);\n});\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/demo/testDirectiveInit.js":"angular.module('sgAppTest', []);\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/demo/testDirective.js":"'use strict';\n\n// Test directive is used to demo lazy loading external directive in the test project\n\nangular.module('sgAppTest')\n  .controller('sgAppTest', function($scope) {\n    $scope.clickCount = 0;\n    $scope.incrementClicks = function() {\n      $scope.clickCount += 1;\n    };\n  })\n  .directive('sgTestDirective', function() {\n    return {\n      replace: true,\n      restrict: 'A',\n      templateUrl: 'demo/testDirective.html'\n    };\n  });\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/demo/testDirectiveTwo.js":"'use strict';\n\nangular.module('sgAppTest')\n  .controller('sgAppTest', function($scope) {\n    $scope.clickCount = 0;\n    $scope.incrementClicks = function() {\n      $scope.clickCount += 1;\n    };\n  })\n  .directive('sgTestDirectiveTwo', function() {\n    return {\n      replace: true,\n      restrict: 'A',\n      templateUrl: 'demo/testDirective.html'\n    };\n  });\n","/home/travis/build/npmtest/node-npmtest-sc5-styleguide/node_modules/sc5-styleguide/lib/modules/io.js":"var fs = require('fs'),\n  path = require('path'),\n  Q = require('q'),\n  _ = require('lodash'),\n  parser = require('./variable-parser'),\n  events = {\n    connection: 'connection',\n    progress: {\n      start: 'styleguide progress start',\n      end: 'styleguide progress end'\n    },\n    styles: {\n      changed: 'styleguide styles changed'\n    },\n    variables: {\n      saved: 'variables saved to server',\n      toServer: 'variables to server'\n    },\n    compile: {\n      success: 'styleguide compile success',\n      error: 'styleguide compile error'\n    },\n    validation: {\n      // success: Validation does not have success event since it is handled via compile.success\n      error: 'styleguide validation error'\n    }\n  };\n\nmodule.exports = function(ioServer, options) {\n\n  var io = ioServer,\n    compileError = false,\n    fileHashes = options.fileHashes;\n\n  function saveVariables(vars) {\n    var variables;\n    return Q.promise(function(resolve, reject) {\n      try {\n        variables = _.chain(vars).groupBy('fileHash').map(asObjectWithFileProperties).value();\n        variables.forEach(readFileContents);\n        variables.forEach(updateVariableValues);\n        variables.forEach(checkSyntax);\n        variables.forEach(writeFileContents);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  function asObjectWithFileProperties(variables, hash) {\n    var filePath = fileHashes[hash];\n    return {\n      path: filePath,\n      syntax: path.extname(filePath).substring(1),\n      variables: variables\n    };\n  }\n\n  function readFileContents(file) {\n    file.contents = fs.readFileSync(file.path, { encoding: 'utf8' });\n  }\n\n  function updateVariableValues(file) {\n    file.contents = parser.setVariables(file.contents, file.syntax, file.variables, options);\n  }\n\n  function checkSyntax(file) {\n    parser.parseVariableDeclarations(file.contents, file.syntax, options);\n  }\n\n  function writeFileContents(file) {\n    fs.writeFileSync(file.path, file.contents, { encoding: 'utf8' });\n  }\n\n  function emitProgressStart() {\n    io.sockets.emit(events.progress.start);\n  }\n\n  function emitStylesChanged() {\n    io.sockets.emit(events.styles.changed);\n  }\n\n  function emitProgressEnd() {\n    io.sockets.emit(events.progress.end);\n  }\n\n  function emitCompileError(err, socket) {\n    compileError = err;\n    var error = buildError(compileError, 'Compile error');\n    if (socket) {\n      socket.emit(events.compile.error, error);\n    } else {\n      io.sockets.emit(events.compile.error, error);\n    }\n  }\n\n  function emitValidationError(err, socket) {\n    var error = buildError(err, 'Validation error');\n    socket.emit(events.validation.error, error);\n  }\n\n  function buildError(e, name) {\n    return {\n      name: name,\n      message: e.message || e.toString(),\n      wrappedError: e\n    };\n  }\n\n  function emitCompileSuccess(socket) {\n    compileError = false;\n    if (socket) {\n      socket.emit(events.compile.success);\n    } else {\n      io.sockets.emit(events.compile.success);\n    }\n  }\n\n  io.on(events.connection, function(socket) {\n    console.log('Socket connection established (id:', socket.conn.id + ')');\n\n    // Listen to save events only when we are not in the readonly mode\n    if (!options.readOnly) {\n      socket.on(events.variables.toServer, function(variables) {\n        saveVariables(variables).done(function() {\n          console.log('EVENT: variables saved to server');\n          socket.emit(events.variables.saved);\n        }, function(err) {\n          console.error('Unable to save variables to server:', err);\n          console.error(err.message);\n          emitValidationError(err, socket);\n        });\n      });\n    }\n\n    if (compileError) {\n      emitCompileError(compileError, socket);\n    } else {\n      emitCompileSuccess(socket);\n    }\n  });\n\n  return {\n    saveVariables: saveVariables,\n    emitProgressStart: emitProgressStart,\n    emitProgressEnd: emitProgressEnd,\n    emitStylesChanged: emitStylesChanged,\n    emitCompileError: emitCompileError,\n    emitCompileSuccess: emitCompileSuccess\n  };\n};\n"}